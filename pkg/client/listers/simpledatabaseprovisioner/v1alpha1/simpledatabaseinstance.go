/*
 * Copyright (c) 2019 Ecodia GmbH & Co. KG <opensource@ecodia.de>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "simple-database-provisioner/pkg/apis/simpledatabaseprovisioner/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SimpleDatabaseInstanceLister helps list SimpleDatabaseInstances.
type SimpleDatabaseInstanceLister interface {
	// List lists all SimpleDatabaseInstances in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SimpleDatabaseInstance, err error)
	// SimpleDatabaseInstances returns an object that can list and get SimpleDatabaseInstances.
	SimpleDatabaseInstances(namespace string) SimpleDatabaseInstanceNamespaceLister
	SimpleDatabaseInstanceListerExpansion
}

// simpleDatabaseInstanceLister implements the SimpleDatabaseInstanceLister interface.
type simpleDatabaseInstanceLister struct {
	indexer cache.Indexer
}

// NewSimpleDatabaseInstanceLister returns a new SimpleDatabaseInstanceLister.
func NewSimpleDatabaseInstanceLister(indexer cache.Indexer) SimpleDatabaseInstanceLister {
	return &simpleDatabaseInstanceLister{indexer: indexer}
}

// List lists all SimpleDatabaseInstances in the indexer.
func (s *simpleDatabaseInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.SimpleDatabaseInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SimpleDatabaseInstance))
	})
	return ret, err
}

// SimpleDatabaseInstances returns an object that can list and get SimpleDatabaseInstances.
func (s *simpleDatabaseInstanceLister) SimpleDatabaseInstances(namespace string) SimpleDatabaseInstanceNamespaceLister {
	return simpleDatabaseInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SimpleDatabaseInstanceNamespaceLister helps list and get SimpleDatabaseInstances.
type SimpleDatabaseInstanceNamespaceLister interface {
	// List lists all SimpleDatabaseInstances in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SimpleDatabaseInstance, err error)
	// Get retrieves the SimpleDatabaseInstance from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SimpleDatabaseInstance, error)
	SimpleDatabaseInstanceNamespaceListerExpansion
}

// simpleDatabaseInstanceNamespaceLister implements the SimpleDatabaseInstanceNamespaceLister
// interface.
type simpleDatabaseInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SimpleDatabaseInstances in the indexer for a given namespace.
func (s simpleDatabaseInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SimpleDatabaseInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SimpleDatabaseInstance))
	})
	return ret, err
}

// Get retrieves the SimpleDatabaseInstance from the indexer for a given namespace and name.
func (s simpleDatabaseInstanceNamespaceLister) Get(name string) (*v1alpha1.SimpleDatabaseInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("simpledatabaseinstance"), name)
	}
	return obj.(*v1alpha1.SimpleDatabaseInstance), nil
}
