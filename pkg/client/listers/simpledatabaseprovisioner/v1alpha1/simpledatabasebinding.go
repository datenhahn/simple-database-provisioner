/*
 * Copyright (c) 2019 Ecodia GmbH & Co. KG <opensource@ecodia.de>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "simple-database-provisioner/pkg/apis/simpledatabaseprovisioner/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SimpleDatabaseBindingLister helps list SimpleDatabaseBindings.
type SimpleDatabaseBindingLister interface {
	// List lists all SimpleDatabaseBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SimpleDatabaseBinding, err error)
	// SimpleDatabaseBindings returns an object that can list and get SimpleDatabaseBindings.
	SimpleDatabaseBindings(namespace string) SimpleDatabaseBindingNamespaceLister
	SimpleDatabaseBindingListerExpansion
}

// simpleDatabaseBindingLister implements the SimpleDatabaseBindingLister interface.
type simpleDatabaseBindingLister struct {
	indexer cache.Indexer
}

// NewSimpleDatabaseBindingLister returns a new SimpleDatabaseBindingLister.
func NewSimpleDatabaseBindingLister(indexer cache.Indexer) SimpleDatabaseBindingLister {
	return &simpleDatabaseBindingLister{indexer: indexer}
}

// List lists all SimpleDatabaseBindings in the indexer.
func (s *simpleDatabaseBindingLister) List(selector labels.Selector) (ret []*v1alpha1.SimpleDatabaseBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SimpleDatabaseBinding))
	})
	return ret, err
}

// SimpleDatabaseBindings returns an object that can list and get SimpleDatabaseBindings.
func (s *simpleDatabaseBindingLister) SimpleDatabaseBindings(namespace string) SimpleDatabaseBindingNamespaceLister {
	return simpleDatabaseBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SimpleDatabaseBindingNamespaceLister helps list and get SimpleDatabaseBindings.
type SimpleDatabaseBindingNamespaceLister interface {
	// List lists all SimpleDatabaseBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SimpleDatabaseBinding, err error)
	// Get retrieves the SimpleDatabaseBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SimpleDatabaseBinding, error)
	SimpleDatabaseBindingNamespaceListerExpansion
}

// simpleDatabaseBindingNamespaceLister implements the SimpleDatabaseBindingNamespaceLister
// interface.
type simpleDatabaseBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SimpleDatabaseBindings in the indexer for a given namespace.
func (s simpleDatabaseBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SimpleDatabaseBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SimpleDatabaseBinding))
	})
	return ret, err
}

// Get retrieves the SimpleDatabaseBinding from the indexer for a given namespace and name.
func (s simpleDatabaseBindingNamespaceLister) Get(name string) (*v1alpha1.SimpleDatabaseBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("simpledatabasebinding"), name)
	}
	return obj.(*v1alpha1.SimpleDatabaseBinding), nil
}
