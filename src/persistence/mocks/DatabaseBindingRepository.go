// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import persistence "simple-database-provisioner/src/persistence"

// DatabaseBindingRepository is an autogenerated mock type for the DatabaseBindingRepository type
type DatabaseBindingRepository struct {
	mock.Mock
}

// AddDatabaseBinding provides a mock function with given fields: binding
func (_m *DatabaseBindingRepository) AddDatabaseBinding(binding persistence.DatabaseBinding) error {
	ret := _m.Called(binding)

	var r0 error
	if rf, ok := ret.Get(0).(func(persistence.DatabaseBinding) error); ok {
		r0 = rf(binding)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDatabaseBinding provides a mock function with given fields: bindingId
func (_m *DatabaseBindingRepository) DeleteDatabaseBinding(bindingId persistence.NamespaceUniqueId) error {
	ret := _m.Called(bindingId)

	var r0 error
	if rf, ok := ret.Get(0).(func(persistence.NamespaceUniqueId) error); ok {
		r0 = rf(bindingId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllDatabaseBindings provides a mock function with given fields:
func (_m *DatabaseBindingRepository) FindAllDatabaseBindings() []persistence.DatabaseBinding {
	ret := _m.Called()

	var r0 []persistence.DatabaseBinding
	if rf, ok := ret.Get(0).(func() []persistence.DatabaseBinding); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]persistence.DatabaseBinding)
		}
	}

	return r0
}

// UpdateDatabaseBindingState provides a mock function with given fields: bindingId, newState
func (_m *DatabaseBindingRepository) UpdateDatabaseBindingState(bindingId persistence.NamespaceUniqueId, newState persistence.State) error {
	ret := _m.Called(bindingId, newState)

	var r0 error
	if rf, ok := ret.Get(0).(func(persistence.NamespaceUniqueId, persistence.State) error); ok {
		r0 = rf(bindingId, newState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
