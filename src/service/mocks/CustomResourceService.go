// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import db "simple-database-provisioner/src/persistence"
import mock "github.com/stretchr/testify/mock"

import v1alpha1 "simple-database-provisioner/pkg/apis/simpledatabaseprovisioner/v1alpha1"

// CustomResourceService is an autogenerated mock type for the CustomResourceService type
type CustomResourceService struct {
	mock.Mock
}

// CreateDatabaseBinding provides a mock function with given fields: binding
func (_m *CustomResourceService) CreateDatabaseBinding(binding *v1alpha1.SimpleDatabaseBinding) error {
	ret := _m.Called(binding)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.SimpleDatabaseBinding) error); ok {
		r0 = rf(binding)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateDatabaseInstance provides a mock function with given fields: instance
func (_m *CustomResourceService) CreateDatabaseInstance(instance *v1alpha1.SimpleDatabaseInstance) error {
	ret := _m.Called(instance)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.SimpleDatabaseInstance) error); ok {
		r0 = rf(instance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDatabaseBinding provides a mock function with given fields: bindingId
func (_m *CustomResourceService) DeleteDatabaseBinding(bindingId db.NamespaceUniqueId) error {
	ret := _m.Called(bindingId)

	var r0 error
	if rf, ok := ret.Get(0).(func(db.NamespaceUniqueId) error); ok {
		r0 = rf(bindingId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDatabaseInstance provides a mock function with given fields: instanceId
func (_m *CustomResourceService) DeleteDatabaseInstance(instanceId db.NamespaceUniqueId) error {
	ret := _m.Called(instanceId)

	var r0 error
	if rf, ok := ret.Get(0).(func(db.NamespaceUniqueId) error); ok {
		r0 = rf(instanceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllDatabaseBindings provides a mock function with given fields:
func (_m *CustomResourceService) FindAllDatabaseBindings() []db.DatabaseBinding {
	ret := _m.Called()

	var r0 []db.DatabaseBinding
	if rf, ok := ret.Get(0).(func() []db.DatabaseBinding); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.DatabaseBinding)
		}
	}

	return r0
}

// FindAllDatabaseInstances provides a mock function with given fields:
func (_m *CustomResourceService) FindAllDatabaseInstances() []db.DatabaseInstance {
	ret := _m.Called()

	var r0 []db.DatabaseInstance
	if rf, ok := ret.Get(0).(func() []db.DatabaseInstance); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.DatabaseInstance)
		}
	}

	return r0
}

// FindBindingsByState provides a mock function with given fields: state
func (_m *CustomResourceService) FindBindingsByState(state db.ProvisioningState) []db.DatabaseBinding {
	ret := _m.Called(state)

	var r0 []db.DatabaseBinding
	if rf, ok := ret.Get(0).(func(db.ProvisioningState) []db.DatabaseBinding); ok {
		r0 = rf(state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.DatabaseBinding)
		}
	}

	return r0
}

// FindDatabaseInstanceById provides a mock function with given fields: instanceId
func (_m *CustomResourceService) FindDatabaseInstanceById(instanceId db.NamespaceUniqueId) (db.DatabaseInstance, error) {
	ret := _m.Called(instanceId)

	var r0 db.DatabaseInstance
	if rf, ok := ret.Get(0).(func(db.NamespaceUniqueId) db.DatabaseInstance); ok {
		r0 = rf(instanceId)
	} else {
		r0 = ret.Get(0).(db.DatabaseInstance)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(db.NamespaceUniqueId) error); ok {
		r1 = rf(instanceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindInstancesByState provides a mock function with given fields: state
func (_m *CustomResourceService) FindInstancesByState(state db.ProvisioningState) []db.DatabaseInstance {
	ret := _m.Called(state)

	var r0 []db.DatabaseInstance
	if rf, ok := ret.Get(0).(func(db.ProvisioningState) []db.DatabaseInstance); ok {
		r0 = rf(state)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.DatabaseInstance)
		}
	}

	return r0
}

// MarkDatabaseBindingForDeletion provides a mock function with given fields: bindingId
func (_m *CustomResourceService) MarkDatabaseBindingForDeletion(bindingId db.NamespaceUniqueId) error {
	ret := _m.Called(bindingId)

	var r0 error
	if rf, ok := ret.Get(0).(func(db.NamespaceUniqueId) error); ok {
		r0 = rf(bindingId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkDatabaseInstanceForDeletion provides a mock function with given fields: instanceId
func (_m *CustomResourceService) MarkDatabaseInstanceForDeletion(instanceId db.NamespaceUniqueId) error {
	ret := _m.Called(instanceId)

	var r0 error
	if rf, ok := ret.Get(0).(func(db.NamespaceUniqueId) error); ok {
		r0 = rf(instanceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MarkProcessed provides a mock function with given fields: eventId
func (_m *CustomResourceService) MarkProcessed(eventId string) {
	_m.Called(eventId)
}

// UpdateDatabaseBindingState provides a mock function with given fields: bindingId, newState
func (_m *CustomResourceService) UpdateDatabaseBindingState(bindingId db.NamespaceUniqueId, newState db.State) error {
	ret := _m.Called(bindingId, newState)

	var r0 error
	if rf, ok := ret.Get(0).(func(db.NamespaceUniqueId, db.State) error); ok {
		r0 = rf(bindingId, newState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDatabaseInstanceCredentials provides a mock function with given fields: instanceId, newCredentials
func (_m *CustomResourceService) UpdateDatabaseInstanceCredentials(instanceId db.NamespaceUniqueId, newCredentials map[string][]byte) error {
	ret := _m.Called(instanceId, newCredentials)

	var r0 error
	if rf, ok := ret.Get(0).(func(db.NamespaceUniqueId, map[string][]byte) error); ok {
		r0 = rf(instanceId, newCredentials)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDatabaseInstanceState provides a mock function with given fields: instanceId, newState
func (_m *CustomResourceService) UpdateDatabaseInstanceState(instanceId db.NamespaceUniqueId, newState db.State) error {
	ret := _m.Called(instanceId, newState)

	var r0 error
	if rf, ok := ret.Get(0).(func(db.NamespaceUniqueId, db.State) error); ok {
		r0 = rf(instanceId, newState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WasProcessed provides a mock function with given fields: eventId
func (_m *CustomResourceService) WasProcessed(eventId string) bool {
	ret := _m.Called(eventId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(eventId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
